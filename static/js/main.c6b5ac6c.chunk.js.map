{"version":3,"sources":["PomodoroHistory/PomodoroTimeCard.js","flipclock/ReactFlipClock.js","PomodoroStatus/PomodStatus.js","PeriodicChecks/PeriodicFaceDetection.js","PeriodicChecks/HealthMonitor.js","dialogs/PomoConfigsDialog.js","dialogs/IntroDialog.js","FaceRecognitionPomo.js","reportWebVitals.js","index.js","UserConfigs/PomoConfigsContext.js"],"names":["formatSeconds","seconds","preserveSeconds","roundSeconds","Math","floor","minutes","secondsResidual","minutesResidual","hours","PomodoroCard","props","record","index","title","undefined","className","css","timePeriod","Date","startTime","toLocaleTimeString","slice","endTime","ReactFlipClock","flipclockRef","useRef","flipclockElement","useEffect","current","FlipClock","face","showLabels","originalValue","value","start","toJSON","abs","ref","pomoStatusClassName","PomoStatus","statusMessage","focus","usedClassName","StatusMessage","use","tag","msg","status","style","color","GetFaceDetectionStatus","cameraSupported","cameraReady","faceDetected","loadedModelCount","cameraMessage","cameraStatus","desktop","span","phone","PeriodicFaceDetection","PomoConfigs","useContext","PomoConfigsContext","webcamRef","canvasRef","useState","detected","setDetected","navigator","setCameraReady","onFaceDetectionResult","detectionInterval","faceRecognition","scoreThreshold","enableDetection","detectionRunning","setDetectionRunning","videoTrackRef","humanML","imageCaptureSupported","window","humanMLConfig","modelBasePath","wasmPath","enabled","emotion","antispoof","liveness","mesh","attention","iris","description","body","hand","object","gesture","debug","then","HumanModule","Human","init","load","console","log","useInterval","newCameraReady","readyState","muted","detectUsingModel","inputVideo","video","input","capture","ImageCapture","grabFrame","detect","detectionResult","detectedFace","filter","x","score","at","showFaceRecognitionCanvas","draw","canvas","all","videoConstraints","width","ideal","height","facingMode","showCameraPreview","mediaDevices","getSupportedConstraints","frameRate","hiddenCameraHeight","cameraHeight","Object","keys","models","model","length","currentProgress","closed","progress","showFaceRecognitionStatus","audio","screenshotFormat","onUserMedia","stream","getVideoTracks","onUserMediaError","err","PlayerWithStatus","React","lazy","PomodoroList","PomodoroHistoryTimeChart","HealthMonitor","alertStudySeconds","alertRestSeconds","maxLocalStorageTimeSlot","history","snackbarMessage","setSnackBarMessage","snackbarOpen","setSnackBarOpen","overTime","setOverTime","getDefaultTimeSlot","usedStateTime","useLocalStorageState","defaultValue","serializer","v","JSON","stringify","deserializer","parse","mergedTimeTable","setMergedTimeTable","lastTimeSlot","notificationHistory","setNotificationHistory","useSound","process","playDingBellSfx","tempMissingSeconds","webNotificationSupported","setWebNotificationSupported","sendNotification","message","icon","lastSendTime","nextSendInterval","Notification","permission","badge","notificationIntervalMultiplier","notificationIntervalSeconds","isSupported","enableNotification","requestPermission","document","restNotificationText","focusNotificationText","enablePlayer","fallback","open","onClose","dismissesOnAction","action","label","onClick","detection","NewMergedTimeTable","produce","draftMergeTable","currDetected","pop","push","showPomodoroHistory","onDeleteRestSession","reduce","prevList","currentTimeSlot","newList","newObject","PomoConfigsDialog","formRef","useImmer","pomoConfigs","newPomoConfig","setNewPomoConfig","formValid","setFormValid","zIndex","preventOutsideDismiss","onOpen","event","target","setPomoConfigs","onChange","newValid","reportValidity","required","type","suffix","pattern","min","validity","valid","oldConfig","parseInt","content","playerUrl","newTime","defaultChecked","checked","step","newValue","parseFloat","minLength","resizeable","onlyShowToday","disabled","isDefaultAction","IntroDialog","padding","theme","children","FaceRecognitionPomo","defaultPomoConfigs","openConfigDialog","setOpenConfigDialog","openIntroDialog","setOpenIntroDialog","music_icon","options","primary","secondary","alignStart","alignEnd","Provider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","serviceWorker","register","registration","scope","catch","e","createContext"],"mappings":"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","file":"static/js/main.c6b5ac6c.chunk.js","sourcesContent":["import Card from 'antd/lib/card';\nimport { css } from '@emotion/css'\n\nexport function formatSeconds(seconds, preserveSeconds = false) {\n    const roundSeconds = Math.floor(seconds)\n    if (roundSeconds < 60) {\n      return `${roundSeconds}s`\n    }\n    if (roundSeconds < 3600) {\n      const minutes = Math.floor(roundSeconds / 60);\n      const secondsResidual = roundSeconds - minutes * 60;\n      return preserveSeconds ? `${minutes}m ${secondsResidual}s` : `${minutes}m`;\n    }\n    const minutes = Math.floor(roundSeconds / 60);\n    const minutesResidual = minutes % 60;\n    const hours = Math.floor(minutes / 60);\n    return `${hours}h ${minutesResidual}m`\n  }\n  \n\nexport function PomodoroCard(props) {\n    const record = props.record\n    const index = props.index\n\n    const title = index ? `Pomodoro #${index}` : undefined;\n  \n    return (\n      <>\n  \n  <Card title={title}>\n        <div className={\n          css`\n          display: flex;\n          justify-content: space-around;\n          align-item: center;\n        `\n        }>\n          <span className={\n            css`\n          border-radius: 50%;\n          background: #b0003a;\n          width: 3em;\n          height: 3em;\n          text-align: center;\n          vertical-align: middle;\n          display: inline-block;\n          line-height: 3em;\n          font-size: 1.5em;\n          color: white;\n          font-weight: bold;\n        `\n          }>\n            {formatSeconds(record.timePeriod)}\n          </span>\n          <div className={\n            css`\n              display: flex;\n              align-item: center;\n              justify-content: space-around;\n              flex-direction: column;\n            `\n          }>\n          <p className={\n            css`\n              font-size: 1.5em;\n              font-weight: bold;\n              margin: 0 0 0 10px;\n            `\n          }>\n            {new Date(record.startTime).toLocaleTimeString().slice(0, 5)} - {new Date(record.endTime).toLocaleTimeString().slice(0, 5)}\n          </p>\n          </div>\n  \n        </div>\n  \n      </Card>\n      </>\n    )\n  }\n","import { useEffect, useRef } from 'react';\n\nimport FlipClock from 'flipclock';\nimport 'flipclock/dist/flipclock.css';\nimport './flipclock.css'\n\nfunction ReactFlipClock(props) {\n  // From example: \n  // https://github.com/objectivehtml/FlipClock/blob/v0.10.8/examples/load-new-clock-face.html\n  const flipclockRef = useRef(null);\n  const flipclockElement = useRef(null);\n  const startTime = props.startTime;\n\n  useEffect(() => {\n    if (flipclockElement.current === null) {\n      flipclockElement.current = new FlipClock(flipclockRef.current, new Date(startTime), {\n        face: 'HourCounter',\n        showLabels: false,\n      });\n      flipclockElement.current.originalValue = new Date(startTime);\n      // TODO: Use minute counter when time < 59 minutes\n      //flipclockElement.current.timer.started = new Date(startTime);\n      flipclockElement.current.value = new Date();\n      flipclockElement.current.start()\n      // console.log(flipclockElement.current)\n    }\n\n    if (\n      // Start time changed\n      (startTime !== flipclockElement.current.originalValue.toJSON()) ||\n      // Some times the clock is out of sync, we need to manually sync them\n      (Math.abs(new Date() - flipclockElement.current.value.value) > 1000)\n    ) {\n      // flipclockElement.current.timer.started = new Date(startTime);\n      flipclockElement.current.originalValue = new Date(startTime);\n      flipclockElement.current.value = new Date();\n    }\n  })\n\n  return (\n    <div ref={flipclockRef} />\n  )\n}\n\nexport default ReactFlipClock;","import { css } from \"@emotion/css\"\n\nexport const pomoStatusClassName = css`\n  font-size: 20vw;\n  margin: 0 auto;\n  text-align: center;\n  @media (min-width: 700px) {\n    font-size: 140px;\n  }\n  @media (max-width: 350px) {\n    font-size: 75px;\n  }\n`\n\nexport function PomoStatus(props) {\n  const statusMessage = props.focus ? \"WORKING\" : \"REST\";\n  const usedClassName = props.className || pomoStatusClassName\n  return (\n    <p className={usedClassName}> \n      {statusMessage} \n    </p>\n  )\n}","import { useRef, useEffect, useState, useContext } from 'react';\nimport Webcam from \"react-webcam\";\n//import * as faceapi from 'face-api.js';\n\nimport useInterval from 'use-interval'\nimport { css } from '@emotion/css'\nimport CheckSquareFilled from '@ant-design/icons/CheckSquareFilled';\nimport CloseSquareOutlined from '@ant-design/icons/CloseSquareOutlined';\n\nimport { PomoConfigsContext } from '../UserConfigs/PomoConfigsContext';\n\nimport { Typography } from '@rmwc/typography';\nimport '@rmwc/typography/styles';\nimport { Grid, GridCell } from '@rmwc/grid'\nimport '@rmwc/grid/styles';\nimport { LinearProgress } from '@rmwc/linear-progress';\nimport '@rmwc/linear-progress/styles';\n\nimport \"image-capture\";\n\nfunction StatusMessage(props) {\n  return (\n    <Typography use=\"body2\" tag=\"div\" className={css`text-align: center`}>\n      {props.msg} {props.status ?\n        <CheckSquareFilled style={{ color: \"#1faa00\" }} /> :\n        <CloseSquareOutlined style={{ color: \"#a30000\" }} />\n      }\n    </Typography>\n  )\n}\n\nfunction GetFaceDetectionStatus(cameraSupported, cameraReady, faceDetected, loadedModelCount) {\n  const cameraMessage = cameraSupported ? \"Camera Ready:\" : \"Camera Supported\";\n  const cameraStatus = cameraSupported ? cameraReady : cameraSupported;\n  return (\n    <Grid>\n      <GridCell desktop={4} span={2} phone={4}>\n        <StatusMessage msg={cameraMessage} status={cameraStatus} />\n      </GridCell>\n      <GridCell desktop={4} span={2} phone={4}>\n        <StatusMessage msg=\"Model loaded:\" status={loadedModelCount > 1} />\n      </GridCell>\n      <GridCell desktop={4} span={2} phone={4}>\n        <StatusMessage msg=\"Face Detected:\" status={faceDetected} />\n      </GridCell>\n    </Grid>\n  )\n}\n\nfunction PeriodicFaceDetection(props) {\n  const PomoConfigs = useContext(PomoConfigsContext)\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n  const [detected, setDetected] = useState(false)\n  const [cameraSupported] = useState('mediaDevices' in navigator);\n  const [cameraReady, setCameraReady] = useState(false);\n\n  const onFaceDetectionResult = props.onFaceDetectionResult\n  const detectionInterval = PomoConfigs.faceRecognition.detectionInterval;\n  const scoreThreshold = PomoConfigs.faceRecognition.scoreThreshold;\n  const enableDetection = PomoConfigs.enableDetection;\n  const [detectionRunning, setDetectionRunning] = useState(false);\n  const videoTrackRef = useRef(null);\n  \n  const humanML = useRef(null);\n\n  const imageCaptureSupported = 'ImageCapture' in window;\n\n  // Initialize ML\n  useEffect(() => {\n    if (!enableDetection) return;\n    const humanMLConfig = {\n      modelBasePath: `https://cdn.jsdelivr.net/npm/@vladmandic/human/models/`,\n      wasmPath: \"/face-recognition-pomodoro/models/\",\n      face: {\n        enabled: true,\n        emotion: { enabled: false },\n        antispoof: { enabled: false },\n        liveness: { enabled: false },\n        mesh: { enabled: true },\n        attention: { enabled: false },\n        iris: { enabled: false },\n        description: { enabled: false },\n      },\n      body: { enabled: false },\n      hand: { enabled: false },\n      object: { enabled: false },\n      gesture: { enabled: false },\n      debug: true\n    }\n    import('@vladmandic/human').then(\n      (HumanModule) => {\n        humanML.current = new HumanModule.Human(humanMLConfig);\n        humanML.current.init(humanMLConfig).then(() => {\n          humanML.current.load(humanMLConfig);\n          console.log(\"Human init\", humanML.current);\n        })\n      }\n    )\n  }, [])\n\n  // Detect face every n seconds\n  useInterval(() => {\n    if (!enableDetection) return;\n    if (detectionRunning) return;\n    if (!humanML.current) return;\n\n    const newCameraReady = (videoTrackRef.current \n      && videoTrackRef.current.readyState === \"live\" \n      && !videoTrackRef.current.muted \n      && videoTrackRef.current.enabled);\n\n    if (newCameraReady !== cameraReady) {\n      setCameraReady(newCameraReady);\n    }\n    if (!newCameraReady) return;\n\n    async function detectUsingModel() {\n      try {\n        setDetectionRunning(true);\n\n        const inputVideo = webcamRef.current.video;\n        var input = inputVideo;\n        if (imageCaptureSupported) { \n          const capture = new ImageCapture(videoTrackRef.current)\n          input = await capture.grabFrame();\n        }\n\n        const detectionResult = await humanML.current.detect(input)\n        const detectedFace = detectionResult.face.filter((x) => x.score > scoreThreshold).at(-1)\n        onFaceDetectionResult(detectedFace);\n        setDetected(detectedFace);\n        //console.log(\"Detection used \", ((new Date() - startTime).toString()), \"ms\");\n\n        if (PomoConfigs.faceRecognition.showFaceRecognitionCanvas) {\n          humanML.current.draw.canvas(input, canvasRef.current)\n          humanML.current.draw.all(canvasRef.current, detectionResult);\n        }\n      }\n      finally {\n        setDetectionRunning(false);\n      }\n    }\n\n    detectUsingModel()\n  }, detectionInterval * 1000, true)\n\n  function onUserMedia(stream) {\n    console.log(\"New media stream\", stream)\n    videoTrackRef.current = stream.getVideoTracks()[0];\n  }\n  \n  const videoConstraints = {\n    width: { ideal: 640 },\n    height: { ideal: 480 },\n    facingMode: \"user\",\n  }\n  // Save bandwidth by reducing framerate\n  if (enableDetection && !PomoConfigs.faceRecognition.showCameraPreview && navigator.mediaDevices.getSupportedConstraints) {\n    const videoConstraintAbility = navigator.mediaDevices.getSupportedConstraints();\n    if (videoConstraintAbility.frameRate) {\n      videoConstraints[\"frameRate\"] = { ideal: 2 }\n    }\n  }\n\n  // If image capture is not supported, we will need to read from video element.\n  // Video element won't update if it's not in view\n  const hiddenCameraHeight = imageCaptureSupported ? \"0px\" : \"1px\";\n  const cameraHeight = PomoConfigs.faceRecognition.showCameraPreview ? \"100%\" : hiddenCameraHeight\n  const loadedModelCount = humanML.current ? Object.keys(humanML.current.models).filter((model) => (humanML.current.models[model] !== null)).length : 0;\n  const currentProgress = cameraSupported * 0.1 + cameraReady * 0.4 + 0.5 * (loadedModelCount / 2);\n  return (\n    <>\n      <Grid>\n      \n        <GridCell span={12}>\n          <LinearProgress closed={currentProgress >= 1} progress={currentProgress} />\n          {enableDetection && PomoConfigs.faceRecognition.showFaceRecognitionStatus ?\n            GetFaceDetectionStatus(cameraSupported, cameraReady, detected, loadedModelCount) : <></>}\n        </GridCell>\n\n        {\n          enableDetection ?\n            (\n              <GridCell span={12}>\n                <div className={\n                  css`\n              height: ${cameraHeight};\n              width: ${cameraHeight};\n              overflow: hidden;\n            `\n                }>\n                  <Webcam\n                    audio={false}\n                    ref={webcamRef}\n                    screenshotFormat=\"image/jpeg\"\n                    videoConstraints={videoConstraints}\n                    onUserMedia={onUserMedia}\n                    onUserMediaError={(err) => console.log(err)}\n                  />\n                </div>\n              </GridCell>\n            ) : <></>\n        }\n\n        {\n          enableDetection && humanML && PomoConfigs.faceRecognition.showFaceRecognitionCanvas ?\n            <GridCell span={12}>\n              <canvas width=\"640px\" height=\"480px\" ref={canvasRef} />\n            </GridCell> : <></>\n        }\n      </Grid>\n    </>\n  )\n}\n\nexport default PeriodicFaceDetection","import { useEffect, useState } from 'react';\nimport useInterval from 'use-interval'\nimport { css } from '@emotion/css'\nimport { useLocalStorageState } from 'ahooks';\nimport useSound from 'use-sound';\nimport produce from 'immer';\nimport { useContext, Suspense } from 'react';\nimport React from 'react';\n\nimport { Grid, GridCell } from '@rmwc/grid'\nimport '@rmwc/grid/styles';\nimport { Snackbar, SnackbarAction } from '@rmwc/snackbar';\nimport '@rmwc/snackbar/styles';\n\nimport PeriodicFaceDetection from './PeriodicFaceDetection';\nimport ReactFlipClock from '../flipclock/ReactFlipClock.js'\nimport { PomoConfigsContext } from '../UserConfigs/PomoConfigsContext'\nimport { PomoStatus } from '../PomodoroStatus/PomodStatus'\n\nimport { formatSeconds } from '../PomodoroHistory/PomodoroTimeCard'\n\nconst PlayerWithStatus = React.lazy(() => import('../BackgroundPlayers/PlayerWithStatus'));\nconst PomodoroList = React.lazy(() => import('../PomodoroHistory/PomodoroList'));\nconst PomodoroHistoryTimeChart = React.lazy(() => import('../PomodoroHistory/PomodoroTimeChart'));\n\nfunction HealthMonitor(props) {\n  const PomoConfigs = useContext(PomoConfigsContext);\n\n  const alertStudySeconds = PomoConfigs.alertStudySeconds;\n  const alertRestSeconds = PomoConfigs.alertRestSeconds;\n  const maxLocalStorageTimeSlot = PomoConfigs.history.maxLocalStorageTimeSlot;\n\n  const [snackbarMessage, setSnackBarMessage] = useState(\"\");\n  const [snackbarOpen, setSnackBarOpen] = useState(false);\n  const [overTime, setOverTime] = useState(false);\n\n  function getDefaultTimeSlot(detected = true, startTime = null) {\n    console.log(new Date(), \"Added new session: detected:\", detected, \"startTime\", startTime);\n    const usedStateTime = startTime ? startTime : new Date().toJSON();\n    const timePeriod = Math.floor((new Date() - new Date(usedStateTime)) / 1000);\n    return {\n      startTime: usedStateTime,\n      endTime: new Date().toJSON(),\n      detected: detected,\n      timePeriod: timePeriod\n    }\n  }\n  const [mergedTimeTable, setMergedTimeTable] = useLocalStorageState('mergedTimeTable', {\n    defaultValue: [getDefaultTimeSlot(true)],\n    serializer: (v) => JSON.stringify(v),\n    deserializer: (v) => {\n      const storedTable = JSON.parse(v)\n      // Keep only last maxLocalStorageTimeSlot session for now\n      return storedTable.slice(0 - maxLocalStorageTimeSlot)\n    }\n  });\n\n  const lastTimeSlot = mergedTimeTable.at(-1)\n\n  const [notificationHistory, setNotificationHistory] = useState({})\n  const [playDingBellSfx] = useSound(process.env.PUBLIC_URL + '/sounds/dingbell.aac');\n\n  const tempMissingSeconds = PomoConfigs.tempMissingSeconds;\n\n  const [webNotificationSupported, setWebNotificationSupported] = useState(false)\n\n  useEffect(() => {\n    const isSupported = 'Notification' in window &&\n      'serviceWorker' in navigator &&\n      'PushManager' in window;\n    setWebNotificationSupported(isSupported)\n    if (!isSupported) {\n      console.log(\"This browser does not support desktop notification\")\n      return;\n    }\n    if (PomoConfigs.enableNotification) {\n      Notification.requestPermission();\n    }\n  }, [PomoConfigs.enableNotification])\n\n  function sendNotification(message, icon) {\n    if (notificationHistory[message] && (\n      (new Date() - notificationHistory[message].lastSendTime) < (notificationHistory[message].nextSendInterval * 1000))) {\n      // Only send notification every notificationIntervalSeconds\n      return;\n    }\n\n    // If it's okay let's create a notification\n    playDingBellSfx();\n    if (webNotificationSupported && Notification.permission === \"granted\") {\n      new Notification(message, { icon: icon, badge: icon });\n    }\n\n    setSnackBarOpen(true);\n    setSnackBarMessage(message);\n\n    const nextSendInterval = notificationHistory[message] ?\n      notificationHistory[message].nextSendInterval * PomoConfigs.notificationIntervalMultiplier :\n      PomoConfigs.notificationIntervalSeconds;\n\n    notificationHistory[message] = {\n      lastSendTime: new Date(),\n      nextSendInterval: nextSendInterval\n    }\n    setNotificationHistory(notificationHistory);\n  }\n\n  function onFaceDetectionResult(detection) {\n    // calculate continue time\n    const NewMergedTimeTable = produce(mergedTimeTable, (draftMergeTable) => {\n      const currDetected = (detection !== undefined)\n      if (draftMergeTable.at(-1).detected !== currDetected\n        && (draftMergeTable.at(-1).timePeriod < tempMissingSeconds)) {\n        // If last section is less than tempMissingSeconds seconds\n        // remove last section so that we have a more continous time range.\n        draftMergeTable.pop();\n      }\n\n      if (draftMergeTable.length === 0) {\n        draftMergeTable.push(getDefaultTimeSlot(currDetected))\n        return;\n      }\n\n      if (draftMergeTable.at(-1).detected !== currDetected) {\n        draftMergeTable.push(getDefaultTimeSlot(currDetected, draftMergeTable.at(-1).endTime))\n        return;\n      }\n\n      // If work time not refreshed for some time, start a new session, as computer lock will prevent camera show\n      if (currDetected && draftMergeTable.at(-1).detected && (new Date() - new Date(draftMergeTable.at(-1).endTime)) > 1000 * PomoConfigs.tempMissingSeconds) {\n        // Add a rest session\n        draftMergeTable.push(getDefaultTimeSlot(false, draftMergeTable.at(-1).endTime))\n        // Add a work session\n        draftMergeTable.push(getDefaultTimeSlot(true, new Date().toJSON()))\n        return;\n      }\n\n      draftMergeTable.at(-1).endTime = new Date().toJSON()\n      draftMergeTable.at(-1).timePeriod = (new Date() - new Date(draftMergeTable.at(-1).startTime)) / 1000\n\n    })\n    setMergedTimeTable(NewMergedTimeTable);\n  }\n\n  function deleteRestSession(startTime) {\n    setMergedTimeTable(\n      mergedTimeTable.reduce((prevList, currentTimeSlot) => {\n        const newList = prevList.slice();\n        if ((currentTimeSlot.startTime === startTime) ||\n          (prevList.at(-1)\n            && prevList.at(-1).endTime === currentTimeSlot.startTime\n            && prevList.at(-1).detected === currentTimeSlot.detected)) {\n          // Merge slots\n          const newObject = {\n            ...newList.at(-1),\n            endTime: currentTimeSlot.endTime,\n            timePeriod: (new Date(prevList.at(-1).endTime) - new Date(prevList.at(-1).startTime)) / 1000\n          }\n          newList.pop()\n          newList.push(newObject);\n          return newList;\n        }\n        newList.push(currentTimeSlot);\n        return newList;\n      }, [])\n    )\n  }\n\n  useInterval(() => {\n    // Update continue face time and continue rest time\n    const timePeriod = (new Date() - new Date(lastTimeSlot.startTime)) / 1000\n    if (lastTimeSlot.detected && (timePeriod > alertStudySeconds)) {\n      setOverTime(true);\n      document.title = PomoConfigs.restNotificationText;\n      const iconUrl = \"https://chenditc.github.io/face-recognition-pomodoro/images/relax.png\"\n      sendNotification(PomoConfigs.restNotificationText, iconUrl)\n      return;\n    }\n\n    if (!lastTimeSlot.detected && (timePeriod > alertRestSeconds)) {\n      setOverTime(true);\n      document.title = PomoConfigs.focusNotificationText;\n      const iconUrl = \"https://chenditc.github.io/face-recognition-pomodoro/images/focus.png\"\n      sendNotification(PomoConfigs.focusNotificationText, iconUrl)\n      return;\n    }\n\n    document.title = formatSeconds(timePeriod, true);\n    setOverTime(false);\n    // Only change when there is some item, prevent rerender\n    if ((timePeriod > PomoConfigs.tempMissingSeconds) && (Object.keys(notificationHistory).length > 0)) {\n      setNotificationHistory({})\n    }\n  }, 500, true)\n\n  return (\n    <>\n      {\n        PomoConfigs.enablePlayer ?\n      <Suspense fallback={<div>Loading...</div>}>\n        <PlayerWithStatus focus={lastTimeSlot.detected} overTime={overTime} startTime={lastTimeSlot.startTime} />\n      </Suspense> : <></>\n      }\n      <div className={\n        css`\n      margin: 0 15px;\n      max-width: 700px;\n      min-width: 350px;\n      @media (min-width: 730px) {\n        margin: 0 auto;\n      }\n      `\n      }>\n        <Snackbar\n          open={snackbarOpen}\n          onClose={() => setSnackBarOpen(false)}\n          message={snackbarMessage}\n          dismissesOnAction\n          action={\n            <SnackbarAction\n              label=\"Dismiss\"\n              onClick={() => console.log('Dismiss notification')}\n            />\n          }\n        />\n        <Grid>\n          <GridCell span={12}>\n            <PomoStatus focus={lastTimeSlot.detected} />\n          </GridCell>\n          <GridCell span={12}>\n            <ReactFlipClock startTime={lastTimeSlot.startTime} />\n          </GridCell>\n          <GridCell span={12}>\n            <PeriodicFaceDetection\n              onFaceDetectionResult={onFaceDetectionResult}\n            />\n          </GridCell>\n          {\n            PomoConfigs.history.showPomodoroHistory ?\n              <GridCell span={12}>\n                <h3>Pomodoro History</h3>\n                <Suspense fallback={<div>Loading...</div>}>\n                  <PomodoroHistoryTimeChart mergedTimeTable={mergedTimeTable} />\n                  <PomodoroList mergedTimeTable={mergedTimeTable} onDeleteRestSession={deleteRestSession} />\n                </Suspense>\n              </GridCell> : <></>\n          }\n        </Grid>\n\n      </div>\n    </>\n  )\n}\n\nexport default HealthMonitor;","import { Dialog, DialogTitle, DialogContent, DialogActions, DialogButton } from '@rmwc/dialog';\nimport '@rmwc/dialog/styles';\nimport { TextField } from '@rmwc/textfield';\nimport '@rmwc/textfield/styles';\nimport { Grid, GridRow, GridCell } from '@rmwc/grid'\nimport '@rmwc/grid/styles';\nimport { Switch } from '@rmwc/switch';\nimport '@rmwc/switch/styles';\nimport { Typography } from '@rmwc/typography';\nimport '@rmwc/typography/styles';\nimport { Tooltip } from '@rmwc/tooltip';\nimport '@rmwc/tooltip/styles';\nimport { ListDivider } from '@rmwc/list';\nimport '@rmwc/list/styles';\n\nimport './PomoConfigsDialog.css'\nimport { useImmer } from \"use-immer\";\nimport { useRef, useState } from 'react';\n\nfunction PomoConfigsDialog(props) {\n  const formRef = useRef(null);\n  const [newPomoConfig, setNewPomoConfig] = useImmer(props.pomoConfigs);\n\n  const [formValid, setFormValid] = useState(true);\n\n  return (\n    <>\n      <Dialog\n        style={{zIndex: 15}}\n        open={props.open}\n        preventOutsideDismiss={true}\n        onOpen={(event) => {\n          // Reset config files\n          setNewPomoConfig(props.pomoConfigs);\n        }}\n        onClose={(event) => {\n          if (event.target.action === \"confirm\") {\n            props.setPomoConfigs(newPomoConfig);\n          }\n          props.onClose()\n        }}\n      >\n        <DialogTitle>Configuration</DialogTitle>\n        <DialogContent>\n          <form ref={formRef} onChange={() => {\n            const newValid = formRef.current && formRef.current.reportValidity();\n            console.log(newValid);\n            if (newValid !== formValid) setFormValid(newValid);\n          }}>\n          <Grid>\n            <GridCell span={12}>\n              <GridRow>\n                <GridCell span={12}>\n                  <Typography use=\"subtitle2\">Pomodoro Config</Typography>\n                </GridCell>\n                <GridCell span={4}>\n                  <TextField required label=\"Focus Time\" type=\"number\"\n                    suffix=\"minutes\" pattern=\"[0-9]*\" min={1}\n                    defaultValue={props.pomoConfigs.alertStudySeconds / 60}\n                    onChange={(event) => {\n                      if (!event.target.validity.valid) {\n                        event.target.reportValidity();\n                        return;\n                      }\n                      setNewPomoConfig(\n                        (oldConfig) => { oldConfig.alertStudySeconds = parseInt(event.target.value) * 60 }\n                      )\n                    }}\n                  />\n                </GridCell>\n                <GridCell span={4}>\n                  <TextField required label=\"Rest Time\" type=\"number\"\n                    suffix=\"minutes\" pattern=\"[0-9]*\" min={1}\n                    defaultValue={props.pomoConfigs.alertRestSeconds / 60}\n                    onChange={(event) => {\n                      if (!event.target.reportValidity()) return;\n                      setNewPomoConfig(\n                        (oldConfig) => { oldConfig.alertRestSeconds = parseInt(event.target.value) * 60 }\n                      )\n                    }}\n                  />\n                </GridCell>\n                <GridCell span={4}>\n                  <Tooltip content=\"If the rest time or focus time is less than this, it will not be counted as a separted time slot.\">\n                    <TextField required label=\"Max allowed missing time\" type=\"number\"\n                      suffix=\"seconds\" pattern=\"[0-9]*\" min={0}\n                      defaultValue={props.pomoConfigs.tempMissingSeconds}\n                      onChange={(event) => {\n                        if (!event.target.reportValidity()) return;\n                        setNewPomoConfig(\n                          (oldConfig) => { oldConfig.tempMissingSeconds = parseInt(event.target.value) }\n                        )\n                      }}\n                    />\n                  </Tooltip>\n                </GridCell>\n              </GridRow>\n            </GridCell>\n            <GridCell span={12}><ListDivider /></GridCell>\n            <GridCell span={12}>\n              <Typography use=\"subtitle2\">Background Video Config</Typography>\n            </GridCell>\n            <GridCell span={12}>\n                <Tooltip content=\"Enter a Youtube video url. Leave empty to not play anything.\">\n                  <TextField style={{width:\"100%\"}} label=\"Youtube Url\" type=\"text\"\n                    defaultValue={props.pomoConfigs.playerUrl}\n                    onChange={(event) => {\n                      setNewPomoConfig(\n                        (oldConfig) => { oldConfig.playerUrl = event.target.value }\n                      )\n                    }}\n                  />\n                </Tooltip>\n            </GridCell>\n            <GridCell span={12}><ListDivider /></GridCell>\n            <GridCell span={12}>\n              <GridRow>\n                <GridCell span={12}>\n                  <Typography use=\"subtitle2\">Face Recognition Config</Typography>\n                </GridCell>\n                <GridCell>\n                  <Tooltip content=\"Every n seconds we detect user face, shorter interval might increase CPU usage, longer interval might make pomodoro less sensitive.\">\n                    <TextField required label=\"Face Detection Interval\" type=\"number\"\n                      pattern=\"[0-9]*\" suffix=\"seconds\" min={2}\n                      defaultValue={props.pomoConfigs.faceRecognition.detectionInterval}\n                      onChange={(event) => {\n                        if (!event.target.reportValidity()) return;\n                        const newTime = parseInt(event.target.value)\n                        setNewPomoConfig(\n                          (oldConfig) => { oldConfig.faceRecognition.detectionInterval = newTime }\n                        )\n                      }}\n                    />\n                  </Tooltip>\n                </GridCell>\n                <GridCell>\n                  <Switch\n                    defaultChecked={props.pomoConfigs.faceRecognition.showFaceRecognitionStatus}\n                    onChange={(event) => {\n                      setNewPomoConfig(\n                        (oldConfig) => { oldConfig.faceRecognition.showFaceRecognitionStatus = event.target.checked }\n                      )\n                    }}\n                    label=\"Show Face Recognition Status\"\n                  />\n                </GridCell>\n                <GridCell>\n                  <Switch\n                    defaultChecked={props.pomoConfigs.faceRecognition.showCameraPreview}\n                    onChange={(event) => {\n                      setNewPomoConfig(\n                        (oldConfig) => { oldConfig.faceRecognition.showCameraPreview = event.target.checked }\n                      )\n                    }}\n                    label=\"Show Live Camera Preview\"\n                  />\n                </GridCell>\n                <GridCell>\n                  <Switch\n                    defaultChecked={props.pomoConfigs.faceRecognition.showFaceRecognitionCanvas}\n                    onChange={(event) => {\n                      setNewPomoConfig(\n                        (oldConfig) => { oldConfig.faceRecognition.showFaceRecognitionCanvas = event.target.checked }\n                      )\n                    }}\n                    label=\"Show Face Detection Result\"\n                  />\n                </GridCell>\n              </GridRow>\n            </GridCell>\n            <GridCell span={12}><ListDivider /></GridCell>\n            <GridCell span={12}>\n              <GridRow>\n                <GridCell span={12}>\n                  <Typography use=\"subtitle2\">Notification Config</Typography>\n                </GridCell>\n                <GridCell span={4}>\n                  <TextField required label=\"Notification Interval Time\" type=\"number\"\n                    suffix=\"seconds\" pattern=\"[0-9]*\"\n                    defaultValue={props.pomoConfigs.notificationIntervalSeconds}\n                    onChange={(event) => {\n                      if (!event.target.reportValidity()) return;\n                      setNewPomoConfig(\n                        (oldConfig) => { oldConfig.notificationIntervalSeconds = parseInt(event.target.value) }\n                      )\n                    }}\n                  />\n                </GridCell>\n                <GridCell span={4}>\n                  <Tooltip content=\"Everytime a notification is send, its wait time will multiply previous interval, so that the sending interval is longer and longer. If you don't want this behavior, change it to 1.\">\n                    <TextField required label=\"Notification Interval Multiplier\"\n                      suffix=\"times\" pattern=\"[0-9\\.]*\" min={1} type=\"number\" step=\"0.1\"\n                      defaultValue={props.pomoConfigs.notificationIntervalMultiplier}\n                      onChange={(event) => {\n                        if (!event.target.reportValidity()) return;\n                        const newValue = parseFloat(event.target.value)\n                        setNewPomoConfig(\n                          (oldConfig) => { oldConfig.notificationIntervalMultiplier = newValue }\n                        )\n                      }}\n                    />\n                  </Tooltip>\n                </GridCell>\n                <GridCell span={12}>\n                  <Tooltip content=\"This message will be displayed to let you know it's time to start Pomodoro session.\">\n                    <TextField style={{width: \"100%\"}} required label=\"Focus Notification Message\"\n                      minLength={1}\n                      defaultValue={props.pomoConfigs.focusNotificationText}\n                      onChange={(event) => {\n                        if (!event.target.reportValidity()) return;\n                        setNewPomoConfig(\n                          (oldConfig) => { oldConfig.focusNotificationText = event.target.value }\n                        )\n                      }}\n                    />\n                  </Tooltip>\n                </GridCell>\n                <GridCell span={12}>\n                  <Tooltip content=\"This message will be displayed to let you know it's time to take a break.\">\n                    <TextField style={{width: \"100%\"}} required label=\"Rest Notification Message\"\n                      minLength={1}\n                      defaultValue={props.pomoConfigs.restNotificationText}\n                      onChange={(event) => {\n                        if (!event.target.reportValidity()) return;\n                        setNewPomoConfig(\n                          (oldConfig) => { oldConfig.restNotificationText = event.target.value }\n                        )\n                      }}\n                    />\n                  </Tooltip>\n                </GridCell>\n              </GridRow>\n            </GridCell>\n            <GridCell span={12}><ListDivider /></GridCell>\n            <GridCell span={12}>\n              <GridRow>\n                <GridCell span={12}>\n                  <Typography use=\"subtitle2\">Pomodoro History Config</Typography>\n                </GridCell>\n                <GridCell>\n                  <Tooltip content=\"Increasing this might degrade performance.\">\n                    <TextField required label=\"Max pomodoro history entries kepted\" type=\"number\"\n                      resizeable={true}\n                      pattern=\"[0-9]*\" suffix=\"entries\" min={1}\n                      defaultValue={props.pomoConfigs.history.maxLocalStorageTimeSlot}\n                      onChange={(event) => {\n                        if (!event.target.reportValidity()) return;\n                        setNewPomoConfig(\n                          (oldConfig) => { oldConfig.history.maxLocalStorageTimeSlot = parseInt(event.target.value) }\n                        )\n                      }}\n                    />\n                  </Tooltip>\n                </GridCell>\n                <GridCell>\n                  <Switch\n                    defaultChecked={props.pomoConfigs.history.showPomodoroHistory}\n                    onChange={(event) => {\n                      setNewPomoConfig(\n                        (oldConfig) => { oldConfig.history.showPomodoroHistory = event.target.checked }\n                      )\n                    }}\n                    label=\"Show Pomodoro History\"\n                  />\n                </GridCell>\n                <GridCell>\n                  <Switch\n                    defaultChecked={props.pomoConfigs.history.onlyShowToday}\n                    onChange={(event) => {\n                      setNewPomoConfig(\n                        (oldConfig) => { oldConfig.history.onlyShowToday = event.target.checked }\n                      )\n                    }}\n                    label=\"Only Show Today's History\"\n                  />\n                </GridCell>\n              </GridRow>\n            </GridCell>\n          </Grid>\n          </form>\n        </DialogContent>\n        <DialogActions>\n          <DialogButton action=\"close\">Cancel</DialogButton>\n          <DialogButton action=\"confirm\" disabled={!formValid} isDefaultAction>\n            Confirm\n          </DialogButton>\n        </DialogActions>\n      </Dialog>\n    </>\n  )\n}\n\nexport default PomoConfigsDialog;","import { Dialog, DialogTitle, DialogContent, DialogActions, DialogButton } from '@rmwc/dialog';\nimport '@rmwc/dialog/styles';\n\nimport { Typography } from '@rmwc/typography';\nimport '@rmwc/typography/styles';\n\nimport { Card, CardPrimaryAction} from '@rmwc/card';\nimport '@rmwc/card/styles';\n\nimport ReactMarkdown from 'react-markdown'\n\nfunction IntroDialog(props) {\n  const introMarkdown = `\nThis is a **Pomodoro Clock**. It's special because:\n\n- It can automatically help you start **a focus session** when the camera detected your face.\n- It can automatically start **a rest session** When the camera no longer detect your face \n\nWe will need two permission from you:\n- Permission to **send notification**, so that you will get reminded when session timed out.\n- Permission to **access your camera**.\n\nPlease click allow button around the browser's url.\n`\n\n  return (\n    <>\n      <Dialog\n        style={{zIndex: 15}}\n        open={props.open}\n        onClose={(event) => {\n          props.onClose()\n        }}\n      >\n        <DialogTitle>Intro to Face Recognition Pomodoro</DialogTitle>\n        <DialogContent>\n          <div style={{padding: \"10px\"}} />\n          <Card>\n            <CardPrimaryAction>\n              <div style={{ padding: '0 1rem 1rem 1rem' }}>\n                <Typography use=\"headline6\" tag=\"h2\">\n                What is this?\n                </Typography>\n                <Typography\n                  use=\"body1\"\n                  tag=\"div\"\n                  theme=\"textSecondaryOnBackground\"\n                >\n                <ReactMarkdown children={introMarkdown} />\n                </Typography>\n              </div>\n            </CardPrimaryAction>\n          </Card>\n          <div style={{padding: \"10px\"}} />\n          <Card>\n            <CardPrimaryAction>\n              <div style={{ padding: '0 1rem 1rem 1rem' }}>\n                <Typography use=\"headline6\" tag=\"h2\">\n                What if I left my camera but don't want to stop the Pomodoro session?\n                </Typography>\n                <Typography\n                  use=\"body1\"\n                  tag=\"div\"\n                  theme=\"textSecondaryOnBackground\"\n                >\n                <ReactMarkdown>\n                  If the time of stepping away is less than **Max Allowed Missing Time** \n                  in the settings, the Pomodoro session will continue the session when you are back.\n                </ReactMarkdown>\n                  \n                </Typography>\n              </div>\n            </CardPrimaryAction>\n          </Card>\n          <div style={{padding: \"10px\"}} />\n          <Card>\n            <CardPrimaryAction>\n              <div style={{ padding: '0 1rem 1rem 1rem' }}>\n                <Typography use=\"headline6\" tag=\"h2\">\n                Why this intro always popup on start?\n                </Typography>\n                <Typography\n                  use=\"body1\"\n                  tag=\"div\"\n                  theme=\"textSecondaryOnBackground\"\n                >\n                  There must be at least one user interaction to make notification works, so I take this opportunity to intro the tool.\n                </Typography>\n              </div>\n            </CardPrimaryAction>\n          </Card>\n          <div style={{padding: \"10px\"}} />\n          <Card>\n            <CardPrimaryAction>\n              <div style={{ padding: '0 1rem 1rem 1rem' }}>\n                <Typography use=\"headline6\" tag=\"h2\">\n                Will this slow down my computer or phone?\n                </Typography>\n                <Typography\n                  use=\"body1\"\n                  tag=\"div\"\n                  theme=\"textSecondaryOnBackground\"\n                >\n                  Usually not, it leverage GPU to detect your face and just takes a few milliseconds.\n                </Typography>\n              </div>\n            </CardPrimaryAction>\n          </Card>\n        </DialogContent>\n        <DialogActions>\n          <DialogButton action=\"confirm\" isDefaultAction>\n            Ok, let's continue.\n          </DialogButton>\n        </DialogActions>\n      </Dialog>\n    </>\n  )\n}\n\nexport default IntroDialog;","import HealthMonitor from \"./PeriodicChecks/HealthMonitor\";\nimport 'antd/dist/antd.css';\nimport { useState } from \"react\";\nimport { useLocalStorageState } from 'ahooks';\nimport { defaultPomoConfigs, PomoConfigsContext } from './UserConfigs/PomoConfigsContext'\nimport { TopAppBar, TopAppBarRow, TopAppBarSection, TopAppBarActionItem, TopAppBarTitle, TopAppBarFixedAdjust } from '@rmwc/top-app-bar';\nimport { ThemeProvider } from '@rmwc/theme'\nimport { css } from \"@emotion/css\";\nimport { produce } from 'immer';\n\nimport '@rmwc/theme/styles';\nimport '@rmwc/top-app-bar/styles';\nimport '@rmwc/icon/styles';\n\nimport PomoConfigsDialog from \"./dialogs/PomoConfigsDialog\";\nimport IntroDialog from \"./dialogs/IntroDialog\";\n\nfunction FaceRecognitionPomo() {\n  const [pomoConfigs, setPomoConfigs] = useLocalStorageState(\"pomoConfig\", {\n    defaultValue: defaultPomoConfigs\n  })\n\n  const [openConfigDialog, setOpenConfigDialog] = useState(false);\n  const [openIntroDialog, setOpenIntroDialog] = useState(true);\n\n  function onIntroDialogClose() {\n    setOpenIntroDialog(false)\n    setPomoConfigs(produce(\n      (oldConfig) => {\n        oldConfig.enableDetection = true;\n        oldConfig.enableNotification = true;\n      }\n    ))\n  }\n\n  function toggleMusic() {\n    setPomoConfigs(produce((oldConfig) => {\n      oldConfig.enablePlayer = !oldConfig.enablePlayer\n    }))\n  }\n\n  const music_icon = pomoConfigs.enablePlayer ? \"volume_off\" : \"music_video\"\n\n  return (\n    <>\n      <ThemeProvider\n        options={{\n          primary: '#bf360c',\n          secondary: '#616161'\n        }}\n      >\n\n        <TopAppBar style={{ zIndex: 15 }}>\n          <TopAppBarRow>\n            <TopAppBarSection alignStart>\n              <TopAppBarActionItem icon=\"help\" onClick={() => setOpenIntroDialog(true)} />\n            </TopAppBarSection>\n            <TopAppBarSection className={css`justify-content: center`}>\n              <TopAppBarTitle >\n                Face Recognition Pomodoro\n              </TopAppBarTitle>\n            </TopAppBarSection>\n            <TopAppBarSection alignEnd>\n              <TopAppBarActionItem icon={music_icon} onClick={() => toggleMusic()} />\n              <TopAppBarActionItem icon=\"settings\" onClick={() => setOpenConfigDialog(true)} />\n            </TopAppBarSection>\n          </TopAppBarRow>\n        </TopAppBar>\n        <TopAppBarFixedAdjust />\n\n          <IntroDialog\n            open={openIntroDialog}\n            onClose={onIntroDialogClose}\n          />\n          <PomoConfigsDialog\n            open={openConfigDialog}\n            onClose={() => setOpenConfigDialog(false)}\n            pomoConfigs={pomoConfigs}\n            setPomoConfigs={setPomoConfigs}\n          />\n        <PomoConfigsContext.Provider value={pomoConfigs}>\n          <HealthMonitor />\n        </PomoConfigsContext.Provider>\n\n      </ThemeProvider>\n    </>\n  );\n}\n\nexport default FaceRecognitionPomo;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport FaceRecognitionPomo from \"./FaceRecognitionPomo\";\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  // Remove restrict mode since meterial component dialog conflict with\n  //<React.StrictMode>\n    <FaceRecognitionPomo />\n  //  </React.StrictMode>\n);\n\nreportWebVitals(console.log);\n\nif ('serviceWorker' in navigator) {\n  navigator.serviceWorker.register('./sw.js').then(function(registration) {\n    console.log('SW registration succeeded with scope:', registration.scope);\n  }).catch(function(e) {\n    console.log('SW registration failed with error:', e);\n  });\n}\n","import React from 'react';\n\nconst defaultPomoConfigs = {\n  alertStudySeconds: 25 * 60,\n  alertRestSeconds: 5 * 60,\n  enableNotification: false,\n  notificationIntervalSeconds: 60,\n  notificationIntervalMultiplier: 1,\n  tempMissingSeconds: 60,\n  history: {\n    maxLocalStorageTimeSlot: 100,\n    showPomodoroHistory: true,\n    onlyShowToday: true,\n  },\n  faceRecognition: {\n    detectionInterval: 5,\n    scoreThreshold: 0.95,\n    showFaceRecognitionStatus: false,\n    showFaceRecognitionCanvas: false,\n    showCameraPreview: false,\n  },\n  enableDetection: false,\n  enablePlayer: false,\n  playerUrl: \"https://www.youtube.com/watch?v=q4YyeEM9jsc\",\n  focusNotificationText: \"Time to focus!\",\n  restNotificationText: \"Let's take a break.\"\n}\nconst PomoConfigsContext = React.createContext(defaultPomoConfigs);\n\nexport { defaultPomoConfigs, PomoConfigsContext}"],"sourceRoot":""}