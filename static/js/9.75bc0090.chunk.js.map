{"version":3,"sources":["PomodoroHistory/PomodoroTimeChart.js"],"names":["Chart","React","lazy","PomodoroHistoryTimeChart","props","mergedTimeTable","filter","timeSlot","Date","startTime","toDateString","focusTime","x","detected","reduce","total","curr","timePeriod","chartSessionName","formatSeconds","options","plotOptions","bar","horizontal","barHeight","colors","xaxis","type","labels","datetimeUTC","tooltip","custom","opts","timeSlotInfo","w","config","series","seriesIndex","data","dataPointIndex","info","pomoCard","record","renderToString","name","map","y","getTime","endTime","height"],"mappings":"8IAAA,oDAIMA,EAAQC,IAAMC,MAAK,kBAAM,qCA+DhBC,UA7Df,SAAkCC,GAC9B,IAAMC,EAAkBD,EAAMC,gBAAgBC,QAC1C,SAACC,GAAD,OAAe,IAAIC,KAAKD,EAASE,WAAWC,kBAAmB,IAAIF,MAAOE,kBAExEC,EAAYN,EAAgBC,QAAO,SAACM,GAAD,OAAOA,EAAEC,YAAUC,QAAO,SAACC,EAAOC,GACvE,OAAOD,EAAQC,EAAKC,aACrB,GACGC,EAAmB,UAAYC,YAAcR,GAE7CS,EAAU,CACZC,YAAa,CACTC,IAAK,CACDC,YAAY,EACZC,UAAW,SAGnBC,OAAS,CACL,WAEJC,MAAO,CACHC,KAAM,WACNC,OAAQ,CACJC,aAAa,IAGrBC,QAAS,CACLC,OAAQ,SAASC,GACf,IAAMC,EAAeD,EAAKE,EAAEC,OAAOC,OAAOJ,EAAKK,aAAaC,KAAKN,EAAKO,gBAAgBC,KAChFC,EAAW,cAAC,IAAD,CAAcC,OAAQT,IACvC,OAAOU,yBAAeF,MAoB1BL,EAAS,CACX,CACEQ,KAAM,QACNN,KAlBajC,EAAgBwC,KAC/B,SAACtC,GACG,MAAO,CACPK,EAAGM,EACH4B,EAAG,CACD,IAAItC,KAAKD,EAASE,WAAWsC,UAC7B,IAAIvC,KAAKD,EAASyC,SAASD,WAE7BP,KAAMjC,MAKkBD,QAAO,SAACgC,GAAD,OAAUA,EAAKE,KAAK3B,cAS3D,OACI,cAACb,EAAD,CAAOoB,QAASA,EAASgB,OAAQA,EAAQT,KAAK,WAAWsB,OAAQ","file":"static/js/9.75bc0090.chunk.js","sourcesContent":["import { formatSeconds, PomodoroCard} from \"./PomodoroTimeCard\";\nimport {renderToString} from 'react-dom/server';\nimport React from \"react\";\n\nconst Chart = React.lazy(() => import(\"react-apexcharts\"));\n\nfunction PomodoroHistoryTimeChart(props) {\n    const mergedTimeTable = props.mergedTimeTable.filter(\n        (timeSlot) => (new Date(timeSlot.startTime).toDateString() === new Date().toDateString())\n    )\n    const focusTime = mergedTimeTable.filter((x) => x.detected).reduce((total, curr) => {\n        return total + curr.timePeriod;\n    } ,0)\n    const chartSessionName = \"Total: \" + formatSeconds(focusTime)\n\n    const options = {\n        plotOptions: {\n            bar: {\n                horizontal: true,\n                barHeight: \"100%\"\n            },\n        },\n        colors : [\n            \"#b0003a\"\n        ],\n        xaxis: {\n            type: 'datetime',\n            labels: {\n                datetimeUTC: false\n            }\n        },\n        tooltip: {\n            custom: function(opts) {\n              const timeSlotInfo = opts.w.config.series[opts.seriesIndex].data[opts.dataPointIndex].info;\n              const pomoCard = <PomodoroCard record={timeSlotInfo} />\n              return renderToString(pomoCard)\n            }\n        },\n    };\n\n    const dataSeries = mergedTimeTable.map(\n        (timeSlot) => {\n            return {\n            x: chartSessionName,\n            y: [\n              new Date(timeSlot.startTime).getTime(),\n              new Date(timeSlot.endTime).getTime()\n            ],\n            info: timeSlot\n          }\n        }\n    )\n\n    const focusSession = dataSeries.filter((data) => data.info.detected);\n\n    const series = [\n        {\n          name: \"focus\",\n          data: focusSession,\n        }\n    ];\n\n    return (\n        <Chart options={options} series={series} type=\"rangeBar\" height={100} />\n    )\n}\n\nexport default PomodoroHistoryTimeChart;"],"sourceRoot":""}